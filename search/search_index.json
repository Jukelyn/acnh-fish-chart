{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#project-layout","title":"Project layout","text":"Text Only<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"run/","title":"<code>run.py</code>","text":""},{"location":"run/#local-development","title":"Local Development","text":"<ul> <li><code>python3 -m venv venv</code> - Creates the virtual enviornment.</li> <li><code>source venv/bin/activate</code> - Activates the virtual enviornment.</li> <li><code>pip install -r requirements.txt</code> - Installs dependencies for the program</li> <li><code>python run.py</code> - Runs a local flask server.</li> </ul> <p>This script runs the application defined in the <code>app</code> module from the <code>src</code> package.</p> <p>The script checks if it is being run as the main module and, if so, starts the application server.</p> <p>Modules:</p> Name Description <code>src.app</code> <p>The application instance to be run.</p> Usage <p>Run this script directly to start the application server.</p>"},{"location":"src/main/","title":"<code>src/main.py</code>","text":"<p>This module provides utilities for processing and visualizing data related to sea creatures, insects, fossils, gyroids, artwork, and fish in the game Animal Crossing: New Horizons. It includes functions for plotting spawning calendars, filtering data, and finding the closest matches for user input.</p> <p>Functions:</p> Name Description <code>plot_spawning_calendar</code> <p>pd.DataFrame, title: str, filename: str) -&gt; None:     Creates a plot for the fish in a calendar style and saves it as an     image.</p> <code>get_caught_fish</code> <p>list[str]) -&gt; list[str]: Returns a list of caught fish names based on the input list of fish names.</p> <code>process_fish_data</code> <p>list[str] = None) -&gt; tuple: Processes the fish data to separate caught and uncaught fish and returns relevant dataframes.</p> <code>filter_data</code> <p>list[str], filter_by: list[str]) -&gt; list[str]: Filters the input list by removing items that match the filter list.</p> <code>get_closest_match</code> <p>str, threshold: int = 80) -&gt; list[str]: Finds and returns the closest matches for the user input from the list of all fish names.</p> <code>get_problems</code> <p>list[str]) -&gt; set[str]: Identifies and returns a set of fish names that are not present in the list of all fish names.</p>"},{"location":"src/main/#src.main.plot_spawning_calendar","title":"<code>plot_spawning_calendar(dataframe, title, filename)</code>","text":"<p>Creates a plot for the fish in a calendar style and saves it as image.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>The dataframe with the data for the plot.</p> required <code>title</code> <code>str</code> <p>The title of the plot.</p> required <code>filename</code> <code>str</code> <p>The filename of the saved image.</p> required <p>Returns:</p> Type Description <code>None</code> <p>This just creates the image files given the fish data.</p> Source code in <code>src/main.py</code> Python<pre><code>def plot_spawning_calendar(\n    dataframe: pd.DataFrame, title: str, filename: str\n) -&gt; None:\n    \"\"\"\n    Creates a plot for the fish in a calendar style and saves it as image.\n\n    Args:\n        dataframe (pd.DataFrame): The dataframe with the data for the plot.\n        title (str): The title of the plot.\n        filename (str): The filename of the saved image.\n\n    Returns:\n        (None): This just creates the image files given the fish data.\n    \"\"\"\n\n    plt.figure(figsize=(12, len(dataframe) * 0.5))\n    # Convert to 1s and NaNs (1 means spawning, NaN means no spawn)\n    spawn_data = dataframe.set_index(\"Name\").notna().astype(int)\n\n    ax = sns.heatmap(spawn_data, cmap=\"Greens\", linewidths=0.5, cbar=False)\n\n    ax.set_xticklabels([\"January\", \"February\", \"March\",\n                        \"April\", \"May\", \"June\",\n                        \"July\", \"August\", \"September\",\n                        \"October\", \"November\", \"December\"\n                        ]\n                       )\n\n    plt.xlabel(\"\")\n    ax.xaxis.set_ticks_position(\"top\")\n    ax.xaxis.set_label_position(\"top\")\n\n    # Add a red line between the columns of the current month\n    current_month = datetime.now().month\n    ax.axvline(x=current_month - 0.5, color=\"red\", linestyle=\"-\", linewidth=2)\n    # Create a custom legend\n    legend_elements = [\n        Line2D([0], [0], color=\"red\", lw=2, label=\"Current Month\")]\n    ax.legend(handles=legend_elements,\n              loc=\"upper right\", bbox_to_anchor=(1.2, 1))\n\n    plt.ylabel(\"\")\n    plt.title(title, loc=\"center\")\n    plt.xticks(rotation=45)\n    plt.yticks()\n\n    plt.savefig(\"static/images/\" + filename, bbox_inches=\"tight\", dpi=300)\n    # plt.show()\n\n    plt.close()\n</code></pre>"},{"location":"src/main/#src.main.update_calendars","title":"<code>update_calendars(nh_df, sh_df)</code>","text":"<p>Updates the calendar images based on the fish dataframes.</p> <p>Parameters:</p> Name Type Description Default <code>nh_df</code> <code>DataFrame</code> <p>Northern hemisphere fish data.</p> required <code>sh_df</code> <code>DataFrame</code> <p>Southern hemisphere fish data.</p> required <p>Returns:</p> Type Description <code>None</code> <p>This just calls plot_spawning_calendar() for both hemispheres.</p> Source code in <code>src/main.py</code> Python<pre><code>def update_calendars(nh_df: pd.DataFrame, sh_df: pd.DataFrame) -&gt; None:\n    \"\"\"Updates the calendar images based on the fish dataframes.\n\n    Args:\n        nh_df (pd.DataFrame): Northern hemisphere fish data.\n        sh_df (pd.DataFrame): Southern hemisphere fish data.\n\n    Returns:\n        (None): This just calls plot_spawning_calendar() for both hemispheres.\n    \"\"\"\n    plot_spawning_calendar(nh_df, \"Northern Hemisphere\",\n                           \"NH_spawning_calendar.png\")\n    plot_spawning_calendar(sh_df, \"Southern Hemisphere\",\n                           \"SH_spawning_calendar.png\")\n</code></pre>"},{"location":"src/main/#src.main.get_caught_fish","title":"<code>get_caught_fish(fishes_caught)</code>","text":"<p>Given a list of caught fish names, returns a list of valid fish names that have been caught, after filtering for other common items.</p> <p>Parameters:</p> Name Type Description Default <code>fishes_caught</code> <code>list[str]</code> <p>A list of strings representing the names of                        caught fish.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>Valid fish names that have been caught. If the input list          is empty or the first element is empty, returns an empty          list.</p> Source code in <code>src/main.py</code> Python<pre><code>def get_caught_fish(fishes_caught: list[str]) -&gt; list[str]:\n    \"\"\"\n    Given a list of caught fish names, returns a list of valid fish names that\n    have been caught, after filtering for other common items.\n\n    Args:\n        fishes_caught (list[str]): A list of strings representing the names of\n                                   caught fish.\n\n    Returns:\n        (list[str]): Valid fish names that have been caught. If the input list\n                     is empty or the first element is empty, returns an empty\n                     list.\n    \"\"\"\n\n    try:\n        if not fishes_caught[0]:\n            return []\n    except IndexError:\n        return []\n\n    caught_items = set()\n\n    for fishy in fishes_caught:\n        fish_name = fishy.strip().replace(\"_\", \" \")\n        fish_name = renamed.get(fish_name, fish_name)\n\n        caught_items.add(fish_name)\n\n    res = [fish for fish in all_fishes if fish in caught_items]\n\n    return sorted(res, key=str.lower)\n</code></pre>"},{"location":"src/main/#src.main.process_fish_data","title":"<code>process_fish_data(input_fish_list=None)</code>","text":"<p>Processes fish data to determine caught and uncaught fish, and returns dataframes for uncaught fish in the Northern Hemisphere (NH) and Southern Hemisphere (SH).</p> <p>Parameters:</p> Name Type Description Default <code>input_fish_list</code> <code>list</code> <p>A list of fish names that have been                               caught. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>tuple(list, list, Dataframe, Dataframe)</code> <ul> <li>caught_fish (list): Caught fish names.</li> <li>uncaught_fish (list): Uncaught fish names.</li> <li>df_nh_uncaught (DataFrame): Uncaught fish in NH.</li> <li>df_sh_uncaught (DataFrame): Uncaught fish in SH.</li> </ul> Source code in <code>src/main.py</code> Python<pre><code>def process_fish_data(input_fish_list: Optional[list[str]] = None) -&gt; tuple[\n        list[str], list[str], pd.DataFrame, pd.DataFrame]:\n    \"\"\"\n    Processes fish data to determine caught and uncaught fish, and returns\n    dataframes for uncaught fish in the Northern Hemisphere (NH) and Southern\n    Hemisphere (SH).\n\n    Args:\n        input_fish_list (list, optional): A list of fish names that have been\n                                          caught. Defaults to None.\n\n    Returns:\n        (tuple(list, list, pd.Dataframe, pd.Dataframe)):\n            - caught_fish (list): Caught fish names.\n            - uncaught_fish (list): Uncaught fish names.\n            - df_nh_uncaught (DataFrame): Uncaught fish in NH.\n            - df_sh_uncaught (DataFrame): Uncaught fish in SH.\n    \"\"\"\n\n    caught_fish = get_caught_fish(input_fish_list or [])\n    caught_fish = sorted(caught_fish, key=str.lower)\n\n    uncaught_fish = [fish for fish in all_fishes if fish not in caught_fish]\n    uncaught_fish = sorted(uncaught_fish, key=str.lower)\n\n    df_nh_uncaught = NH_df[NH_df[\"Name\"].isin(uncaught_fish)].copy()\n    df_sh_uncaught = SH_df[SH_df[\"Name\"].isin(uncaught_fish)].copy()\n\n    update_calendars(df_nh_uncaught, df_sh_uncaught)\n\n    return (caught_fish, uncaught_fish, df_nh_uncaught, df_sh_uncaught)\n</code></pre>"},{"location":"src/main/#src.main.filter_data","title":"<code>filter_data(arr, filter_by)</code>","text":"<p>Filters out elements from the input list <code>arr</code> that are present in the <code>filter_by</code> list, ignoring case sensitivity.</p> <p>Parameters:</p> Name Type Description Default <code>arr</code> <code>list[str]</code> <p>The list of strings to be filtered.</p> required <code>filter_by</code> <code>list[str]</code> <p>The list of strings to filter out from <code>arr</code>.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>A new list with elements from <code>arr</code> that are not in          <code>filter_by</code>, ignoring case.</p> Source code in <code>src/main.py</code> Python<pre><code>def filter_data(arr: list[str], filter_by: list[str]) -&gt; list[str]:\n    \"\"\"\n    Filters out elements from the input list `arr` that are present in the\n    `filter_by` list, ignoring case sensitivity.\n\n    Args:\n        arr (list[str]): The list of strings to be filtered.\n        filter_by (list[str]): The list of strings to filter out from `arr`.\n\n    Returns:\n        (list[str]): A new list with elements from `arr` that are not in\n                     `filter_by`, ignoring case.\n    \"\"\"\n\n    arr = [renamed.get(insect, insect)\n           for insect in arr]\n\n    filtered_arr = []\n\n    for item in arr:\n        if item.lower() not in [thing.lower() for thing in filter_by]:\n            filtered_arr.append(item)\n\n    return filtered_arr\n</code></pre>"},{"location":"src/main/#src.main.get_closest_match","title":"<code>get_closest_match(user_in, threshold=80)</code>","text":"<p>Finds the closest matching fish names to the user input. This function searches for fish names that closely match the provided user input string. It uses two methods to find matches: 1. Direct substring matching. 2. Fuzzy matching with a specified threshold.</p> <p>Parameters:</p> Name Type Description Default <code>user_in</code> <code>str</code> <p>The input string provided by the user to            search for matching fish names.</p> required <code>threshold</code> <code>int</code> <p>The minimum score for fuzzy                        matching to consider a match.                        Defaults to 80.</p> <code>80</code> <p>Returns:</p> Type Description <code>list[str]</code> <p>Fish names that closely match the user input. The list is          determined based on the highest matching scores from          either direct substring matching or fuzzy matching.</p> Source code in <code>src/main.py</code> Python<pre><code>def get_closest_match(user_in: str, threshold: int = 80) -&gt; list[str]:\n    \"\"\"\n    Finds the closest matching fish names to the user input.\n    This function searches for fish names that closely match the\n    provided user input string. It uses two methods to find matches:\n    1. Direct substring matching.\n    2. Fuzzy matching with a specified threshold.\n\n    Args:\n        user_in (str): The input string provided by the user to\n                       search for matching fish names.\n        threshold (int, optional): The minimum score for fuzzy\n                                   matching to consider a match.\n                                   Defaults to 80.\n\n    Returns:\n        (list[str]): Fish names that closely match the user input. The list is\n                     determined based on the highest matching scores from\n                     either direct substring matching or fuzzy matching.\n    \"\"\"\n\n    possible_matches = [\n        fish for fish in all_fishes if user_in.lower() in fish.lower()\n    ]\n\n    if possible_matches:\n        possible_matches_scores = [\n            fuzz_process.extractOne(user_in, [fish])[1]\n            for fish in possible_matches\n        ]\n        possible_matches_max_score = max(possible_matches_scores)\n    else:\n        possible_matches_max_score = 0\n\n    matches = fuzz_process.extract(user_in, all_fishes, limit=len(all_fishes))\n    filtered_matches = [match for match,\n                        score in matches if score &gt;= threshold]\n\n    if filtered_matches:\n        filtered_matches_scores = [\n            score for _, score in matches if score &gt;= threshold\n        ]\n        filtered_matches_max_score = max(filtered_matches_scores)\n    else:\n        filtered_matches_max_score = 0\n\n    if possible_matches_max_score &gt; filtered_matches_max_score:\n        return possible_matches\n\n    if filtered_matches_max_score &gt; possible_matches_max_score:\n        return filtered_matches\n\n    if len(possible_matches) &gt;= len(filtered_matches):\n        return possible_matches\n\n    return filtered_matches\n</code></pre>"},{"location":"src/main/#src.main.get_problems","title":"<code>get_problems(input_fish)</code>","text":"<p>Identifies fish names in the input list that are not present in the predefined list of all fishes.</p> <p>Parameters:</p> Name Type Description Default <code>input_fish</code> <code>list[str]</code> <p>A list of fish names to be checked.</p> required <p>Returns:</p> Type Description <code>set[str]</code> <p>Fish names that are not found in the predefined         list of all fishes.</p> Source code in <code>src/main.py</code> Python<pre><code>def get_problems(input_fish: list[str]) -&gt; set[str]:\n    \"\"\"\n    Identifies fish names in the input list that are not present in the\n    predefined list of all fishes.\n\n    Args:\n        input_fish (list[str]): A list of fish names to be checked.\n\n    Returns:\n        (set[str]): Fish names that are not found in the predefined\n                    list of all fishes.\n    \"\"\"\n\n    return {item for item in input_fish if item not in all_fishes}\n</code></pre>"},{"location":"src/routes/","title":"<code>src/routes/index.py</code>","text":"<p>This module defines the index page.</p>"},{"location":"src/routes/#src.routes.index.index_route","title":"<code>index_route(app)</code>","text":"<p>Registers the main entry point of the application.</p> <p>This function defines a route that handles both GET and POST requests. - On GET requests, it simply renders the main index page. - On POST requests, it updates the current image based on the hemisphere.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Flask</code> <p>The Flask application instance.</p> required Source code in <code>src/routes/index.py</code> Python<pre><code>def index_route(app):\n    \"\"\"\n    Registers the main entry point of the application.\n\n    This function defines a route that handles both GET and POST requests.\n    - On GET requests, it simply renders the main index page.\n    - On POST requests, it updates the current image based on the hemisphere.\n\n    Args:\n        app (Flask): The Flask application instance.\n    \"\"\"\n    @app.route(\"/\", methods=[\"GET\", \"POST\"])\n    def index():\n        \"\"\"\n        Handles requests to the main '/' route.\n\n        If the request method is POST, it checks for a hemisphere selection and\n        updates the corresponding spawning calendar image. Then, it renders the\n        index page with the available fish data.\n        \"\"\"\n        logging.debug(\"Handling request to '/' route\")\n        if request.method == \"POST\":\n            logging.debug(\"Received POST request\")\n            button = request.form.get(\"hemisphere\")\n            if button == \"NH\":\n                ut.CURRENT_IMAGE = \"static/images/NH_spawning_calendar.png\"\n            elif button == \"SH\":\n                ut.CURRENT_IMAGE = \"static/images/SH_spawning_calendar.png\"\n\n        logging.debug(\"All Fish List: %s\", ut.all_fish_list)\n        logging.debug(\"Uncaught Fish List: %s\", ut.uncaught)\n\n        return render_template(\n            \"index.html\",\n            fish_list=ut.all_fish_list,\n            uncaught_fish=ut.uncaught,\n            fish_list_json=json.dumps(ut.all_fish_list),\n            uncaught_fish_json=json.dumps(sorted(ut.uncaught, key=str.lower)),\n            image_url=ut.CURRENT_IMAGE\n        )\n</code></pre>"},{"location":"src/routes/fish_info/","title":"<code>src/routes/fish_info.py</code>","text":"<p>This module defines the fish information retrieval routes.</p>"},{"location":"src/routes/fish_info/#src.routes.fish_info.get_fish_info","title":"<code>get_fish_info(fish_name)</code>","text":"<p>Returns all specific information about the given fish.</p> <p>Parameters:</p> Name Type Description Default <code>fish_name</code> <code>str</code> <p>Fish to be queried.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>Json representation of the fish data.</p> Source code in <code>src/routes/fish_info.py</code> Python<pre><code>def get_fish_info(fish_name: str) -&gt; Response:\n    \"\"\"\n    Returns all specific information about the given fish.\n\n    Args:\n        fish_name (str): Fish to be queried.\n\n    Returns:\n        (Response): Json representation of the fish data.\n    \"\"\"\n    fish_name = fish_name.lower()\n\n    if fish_name in fish_list.keys():\n        fish_data = fish_list[fish_name]\n\n        # Return all fish details in a single JSON response\n        return jsonify({\n            \"name\": fish_data[\"name\"],\n            \"image\": fish_data[\"imageURL\"],\n            \"sellPrice\": fish_data[\"sellPrice\"],\n            \"location\": fish_data[\"location\"],\n            \"size\": fish_data[\"size\"],\n            \"time\": fish_data[\"time\"],\n            \"nhMonths\": fish_data[\"nhMonths\"],\n            \"shMonths\": fish_data[\"shMonths\"]\n        })\n\n    response: Response = jsonify({\"error\": \"Fish not found\"})\n    response.status_code = 404  # Set status code explicitly\n    return response\n</code></pre>"},{"location":"src/routes/fish_info/#src.routes.fish_info.fish_info_route","title":"<code>fish_info_route(app)</code>","text":"<p>Registers the /fish-info route.</p> <p>This function retrieves fish data based on the fish name provided as a query parameter.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Flask</code> <p>The Flask application instance.</p> required Source code in <code>src/routes/fish_info.py</code> Python<pre><code>def fish_info_route(app):\n    \"\"\"\n    Registers the /fish-info route.\n\n    This function retrieves fish data based on the fish name provided as a\n    query parameter.\n\n    Args:\n        app (Flask): The Flask application instance.\n    \"\"\"\n    @app.route(\"/fish-info/&lt;fish_name&gt;\", methods=[\"GET\"])\n    def wrapped_get_fish_info(fish_name: str):\n        return get_fish_info(fish_name)\n</code></pre>"},{"location":"src/routes/fish_input/","title":"<code>src/routes/fish_input.py</code>","text":"<p>This module defines the fish input page route.</p>"},{"location":"src/routes/fish_input/#src.routes.fish_input.fish_input_route","title":"<code>fish_input_route(app)</code>","text":"<p>Registers the /fish-input route.</p> <p>This function sets up a simple route that serves the fish input page.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Flask</code> <p>The Flask application instance.</p> required Source code in <code>src/routes/fish_input.py</code> Python<pre><code>def fish_input_route(app):\n    \"\"\"\n    Registers the /fish-input route.\n\n    This function sets up a simple route that serves the fish input page.\n\n    Args:\n        app (Flask): The Flask application instance.\n    \"\"\"\n    @app.route(\"/fish-input/\")\n    def fish_input():\n        \"\"\"\n        Serves the fish input page.\n        \"\"\"\n        return render_template(\"fish-input.html\")\n</code></pre>"},{"location":"src/routes/process/","title":"<code>src/routes/process.py</code>","text":"<p>This module defines and handles all of the processing for the fish input data.</p>"},{"location":"src/routes/process/#src.routes.process.process_route","title":"<code>process_route(app)</code>","text":"<p>Registers the process route for processing fish-related data.</p> <p>This function sets up a Flask route that handles POST requests containing a list of fish names. The names are processed, filtered, and validated against known categories such as sea creatures, fossils, insects, gyroids, and artwork. If any names are invalid, suggestions for corrections are provided. The processed data is then used to determine which fish have been caught or remain uncaught.</p> <p>Parameters:</p> Name Type Description Default <code>app</code> <code>Flask</code> <p>The Flask application instance.</p> required Source code in <code>src/routes/process.py</code> Python<pre><code>def process_route(app):\n    \"\"\"\n    Registers the process route for processing fish-related data.\n\n    This function sets up a Flask route that handles POST requests containing a\n    list of fish names. The names are processed, filtered, and validated\n    against known categories such as sea creatures, fossils, insects, gyroids,\n    and artwork. If any names are invalid, suggestions for corrections are\n    provided. The processed data is then used to determine which fish have been\n    caught or remain uncaught.\n\n    Args:\n        app (Flask): The Flask application instance.\n    \"\"\"\n    @app.route(\"/process/\", methods=[\"POST\"])\n    def process():\n        \"\"\"\n        Handles the processing of fish names submitted via POST request.\n\n        Flow:\n        1. Decode and clean the input list.\n        2. Replace fish names based on predefined mappings, if needed.\n        3. Filter out non-relevant entries.\n        4. Identify and suggest corrections for invalid fish names.\n        5. Process the valid fish list and updates caught/uncaught fish lists.\n\n        Returns:\n            Response:\n                - JSON response with suggestions if invalid names are found.\n                - Renders the 'index.html' template with updated fish data.\n        \"\"\"\n        data = request.data.decode(\"utf-8\")\n\n        input_list = [fish.strip().replace(\"_\", \" \")\n                      for fish in data.split(\"\\n\") if fish.strip()]\n\n        input_list = [ut.renamed.get(fish, fish)\n                      for fish in input_list]\n\n        problems = ut.get_problems(input_list)\n        if problems:\n            suggestions = {prob: ut.get_closest_match(\n                prob) for prob in problems}\n            logging.debug(\"Invalid fish names found: %s\", problems)\n            logging.debug(\"Suggested names: %s\", suggestions)\n            invalid_fish_names = list(problems)\n            suggestions_list = [suggestions[fish] for fish in problems]\n            return jsonify({\n                \"invalid_fish_names\": invalid_fish_names,\n                \"suggestions\": suggestions_list\n            })\n\n        logging.debug(\"Fish input saved: %s\", input_list)\n        (ut.caught, ut.uncaught, ut.uncaught_NH_df,\n         ut.uncaught_SH_df) = ut.process_fish_data(input_list)\n\n        return render_template(\n            \"index.html\",\n            fish_list=ut.all_fish_list,\n            uncaught_fish=ut.uncaught,\n            image_url=ut.CURRENT_IMAGE\n        )\n</code></pre>"}]}